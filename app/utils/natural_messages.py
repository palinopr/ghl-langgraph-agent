"""
Natural Message Patterns - Templates for human-like conversations
Implements varied responses to avoid robotic patterns
"""
from typing import Dict, List, Optional, Any
import random


class NaturalMessageTemplates:
    """
    Provides natural message variations for each conversation stage
    Avoids robotic repetition by offering multiple options
    """
    
    # Maria's templates - Warm and helpful
    MARIA_TEMPLATES = {
        "greeting": {
            "es": [
                "Â¡Hola! ðŸ‘‹ Soy Maria de Main Outlet. Ayudo a negocios como el tuyo a nunca perder un cliente por WhatsApp. Â¿CÃ³mo te llamas?",
                "Hola hola ðŸ˜Š AquÃ­ Maria de Main Outlet. Me especializo en automatizar WhatsApp para que no pierdas ventas. Â¿CuÃ¡l es tu nombre?",
                "Â¡Buenas! Soy Maria ðŸ‘‹ Ayudo a empresas a responder todos sus WhatsApp automÃ¡ticamente. Â¿Con quiÃ©n tengo el gusto?",
                "Â¡Hey! Maria de Main Outlet aquÃ­. Â¿SabÃ­as que puedes responder todos tus mensajes automÃ¡ticamente? Â¿CÃ³mo te llamas?",
                "Hola ðŸ˜Š Soy Maria y ayudo a negocios a captar mÃ¡s clientes por WhatsApp. Â¿Tu nombre es...?",
            ],
            "en": [
                "Hi there! ðŸ‘‹ I'm Maria from Main Outlet. I help businesses like yours never miss a customer on WhatsApp. What's your name?",
                "Hello! ðŸ˜Š Maria here from Main Outlet. I specialize in WhatsApp automation so you never lose sales. May I have your name?",
                "Hey! I'm Maria ðŸ‘‹ I help businesses respond to all their WhatsApp messages automatically. Who am I speaking with?",
                "Hi! Maria from Main Outlet here. Did you know you can respond to all messages automatically? What's your name?",
                "Hello ðŸ˜Š I'm Maria and I help businesses capture more customers through WhatsApp. And your name is...?",
            ]
        },
        "ask_business": {
            "es": [
                "{greeting} {name}. Â¿A quÃ© te dedicas?",
                "{greeting} {name}, cuÃ©ntame, Â¿quÃ© tipo de negocio tienes?",
                "{name}, quÃ© gusto conocerte. Â¿En quÃ© industria estÃ¡s?",
                "Encantada, {name}. Dime, Â¿cuÃ¡l es tu negocio?",
                "{greeting} {name} ðŸ˜Š Â¿QuÃ© tipo de empresa manejas?",
            ],
            "en": [
                "{greeting} {name}. What do you do?",
                "{greeting} {name}, tell me, what type of business do you have?",
                "{name}, great to meet you. What industry are you in?",
                "Nice to meet you, {name}. So, what's your business?",
                "{greeting} {name} ðŸ˜Š What kind of company do you run?",
            ]
        },
        "ask_challenge": {
            "es": [
                "Ah, {ack} {business}. Â¿CuÃ¡l es tu mayor reto con los mensajes de WhatsApp?",
                "{business}, {ack}. Dime, Â¿quÃ© es lo mÃ¡s difÃ­cil de manejar en WhatsApp?",
                "Ya veo, {business}. Â¿QuÃ© te quita mÃ¡s tiempo con los mensajes de clientes?",
                "{ack}, conozco bien ese sector. Â¿CuÃ¡l es tu principal desafÃ­o con las conversaciones?",
                "Un {business}, quÃ© bien. Â¿QuÃ© problema tienes con los mensajes?",
            ],
            "en": [
                "Ah, {ack} {business}. What's your biggest challenge with WhatsApp messages?",
                "{business}, {ack}. Tell me, what's the hardest part about managing WhatsApp?",
                "I see, {business}. What takes most of your time with customer messages?",
                "{ack}, I know that sector well. What's your main challenge with conversations?",
                "A {business}, great. What problem do you have with messages?",
            ]
        },
        "present_budget": {
            "es": [
                "Entiendo perfectamente. Puedo ayudarte con eso. Las soluciones empiezan en $300/mes. Â¿Te funciona ese presupuesto?",
                "Definitivamente puedo ayudarte. Mis servicios van desde $300 al mes. Â¿EstÃ¡ dentro de tu presupuesto?",
                "Me encanta, justo en eso me especializo. La inversiÃ³n empieza en $300 mensuales. Â¿Te parece bien?",
                "Perfecto, tengo la soluciÃ³n ideal. Los planes inician en $300/mes. Â¿Trabajamos juntos?",
                "Claro que sÃ­, puedo automatizar todo eso. Desde $300 al mes. Â¿Comenzamos?",
            ],
            "en": [
                "I understand perfectly. I can help you with that. Solutions start at $300/month. Does that budget work for you?",
                "I can definitely help you. My services start from $300 per month. Is that within your budget?",
                "I love it, that's exactly what I specialize in. Investment starts at $300 monthly. Sound good?",
                "Perfect, I have the ideal solution. Plans start at $300/month. Shall we work together?",
                "Of course, I can automate all of that. From $300 per month. Shall we start?",
            ]
        }
    }
    
    # Carlos's templates - Professional and engaging
    CARLOS_TEMPLATES = {
        "greeting": {
            "es": [
                "Â¡{name}! QuÃ© gusto. Soy Carlos, especialista en automatizaciÃ³n. Veo que ya hablaste con Maria sobre {business}...",
                "Hola {name}, soy Carlos. Me comentÃ³ Maria que tienes un {business}. Fascinante sector...",
                "{name}, un placer. Carlos aquÃ­. Entiendo que buscas automatizar tu {business}...",
                "Â¡QuÃ© tal, {name}! Soy Carlos. Me encanta trabajar con {business}s. CuÃ©ntame mÃ¡s...",
                "Saludos {name}, Carlos al habla. Los {business}s son mi especialidad. Platiquemos...",
            ],
            "en": [
                "{name}! Great to meet you. I'm Carlos, automation specialist. I see you spoke with Maria about {business}...",
                "Hi {name}, I'm Carlos. Maria told me you have a {business}. Fascinating sector...",
                "{name}, a pleasure. Carlos here. I understand you want to automate your {business}...",
                "Hey {name}! I'm Carlos. I love working with {business}s. Tell me more...",
                "Greetings {name}, Carlos speaking. {business}s are my specialty. Let's chat...",
            ]
        },
        "explore_goals": {
            "es": [
                "Me encanta tu visiÃ³n. Ahora, Â¿cuÃ¡l es tu meta principal con la automatizaciÃ³n?",
                "Excelente. Dime, Â¿quÃ© resultado especÃ­fico buscas lograr?",
                "Muy bien. Â¿CuÃ¡l serÃ­a tu objetivo ideal con WhatsApp?",
                "Perfecto. Â¿QuÃ© es lo mÃ¡s importante que quieres conseguir?",
                "Genial. Â¿CÃ³mo visualizas tu negocio con la automatizaciÃ³n funcionando?",
            ],
            "en": [
                "I love your vision. Now, what's your main goal with automation?",
                "Excellent. Tell me, what specific result are you looking to achieve?",
                "Very good. What would be your ideal objective with WhatsApp?",
                "Perfect. What's the most important thing you want to accomplish?",
                "Great. How do you envision your business with automation working?",
            ]
        }
    }
    
    # Sofia's templates - Efficient and closing-focused
    SOFIA_TEMPLATES = {
        "greeting": {
            "es": [
                "{name}, Â¡quÃ© emociÃ³n! Soy Sofia y voy a ayudarte a implementar todo. Â¿Listo para transformar tu {business}?",
                "Â¡{name}! Sofia aquÃ­. Me encanta que estÃ©s listo para automatizar. Â¿Empezamos con tu {business}?",
                "Hola {name}, soy Sofia. Â¡Vamos a revolucionar tu {business}! Â¿Preparado?",
                "{name}, quÃ© gusto. Sofia al habla. Tu {business} va a despegar. Â¿Comenzamos?",
                "Â¡Excelente decisiÃ³n, {name}! Soy Sofia. Tu {business} estÃ¡ a punto de cambiar. Â¿Listo?",
            ],
            "en": [
                "{name}, how exciting! I'm Sofia and I'll help you implement everything. Ready to transform your {business}?",
                "{name}! Sofia here. I love that you're ready to automate. Shall we start with your {business}?",
                "Hi {name}, I'm Sofia. Let's revolutionize your {business}! Ready?",
                "{name}, great to meet you. Sofia speaking. Your {business} is about to take off. Shall we begin?",
                "Excellent decision, {name}! I'm Sofia. Your {business} is about to change. Ready?",
            ]
        },
        "offer_appointment": {
            "es": [
                "Â¡Perfecto! Tengo estos horarios disponibles para nuestra llamada:\n\n{slots}\n\nÂ¿CuÃ¡l prefieres?",
                "Â¡Genial! Mira, puedo atenderte en estos horarios:\n\n{slots}\n\nÂ¿QuÃ© te funciona mejor?",
                "Â¡Excelente! AquÃ­ estÃ¡n mis prÃ³ximos espacios:\n\n{slots}\n\nÂ¿CuÃ¡l te acomoda?",
                "Â¡Me encanta tu decisiÃ³n! Estos son los horarios:\n\n{slots}\n\nÂ¿CuÃ¡l eliges?",
                "Â¡SÃºper! Tengo disponibilidad en:\n\n{slots}\n\nÂ¿QuÃ© horario te va mejor?",
            ],
            "en": [
                "Perfect! I have these times available for our call:\n\n{slots}\n\nWhich do you prefer?",
                "Great! Look, I can meet at these times:\n\n{slots}\n\nWhat works best for you?",
                "Excellent! Here are my next available slots:\n\n{slots}\n\nWhich suits you?",
                "I love your decision! These are the times:\n\n{slots}\n\nWhich do you choose?",
                "Super! I have availability at:\n\n{slots}\n\nWhat time works better for you?",
            ]
        }
    }
    
    # Natural acknowledgments
    ACKNOWLEDGMENTS = {
        "es": ["Ya veo", "Entiendo", "Claro", "Perfecto", "Genial", "Ok", "Me parece bien"],
        "en": ["I see", "Got it", "Sure", "Perfect", "Great", "Ok", "Sounds good"]
    }
    
    # Natural greetings for name response
    GREETINGS = {
        "es": ["Mucho gusto", "Un placer", "Encantada", "QuÃ© tal", "Hola"],
        "en": ["Nice to meet you", "Pleasure to meet you", "Great to meet you", "Hello", "Hi"]
    }
    
    @classmethod
    def get_natural_response(
        cls,
        agent: str,
        stage: str,
        language: str = "es",
        data: Optional[Dict[str, Any]] = None
    ) -> str:
        """Get a natural response for the given stage"""
        data = data or {}
        
        # Get agent templates
        if agent == "maria":
            templates = cls.MARIA_TEMPLATES
        elif agent == "carlos":
            templates = cls.CARLOS_TEMPLATES
        elif agent == "sofia":
            templates = cls.SOFIA_TEMPLATES
        else:
            return ""
        
        # Get stage templates
        if stage not in templates:
            return ""
        
        # Select random template
        template = random.choice(templates[stage][language])
        
        # Fill in variables
        if "{greeting}" in template:
            template = template.replace("{greeting}", random.choice(cls.GREETINGS[language]))
        
        if "{ack}" in template:
            template = template.replace("{ack}", random.choice(cls.ACKNOWLEDGMENTS[language]))
        
        if "{name}" in template and data.get("name"):
            template = template.replace("{name}", data["name"])
        
        if "{business}" in template and data.get("business"):
            template = template.replace("{business}", data["business"])
        
        if "{slots}" in template and data.get("slots"):
            template = template.replace("{slots}", data["slots"])
        
        return template
    
    @classmethod
    def get_thinking_pause(cls, language: str = "es") -> str:
        """Get a natural thinking pause"""
        pauses = {
            "es": ["DÃ©jame ver...", "A ver...", "Mmm...", "Bueno...", "Mira..."],
            "en": ["Let me see...", "Hmm...", "Well...", "So...", "Actually..."]
        }
        return random.choice(pauses[language])
    
    @classmethod
    def add_natural_typos(cls, message: str, frequency: float = 0.02) -> str:
        """Add natural typos and corrections"""
        if random.random() > frequency:
            return message
        
        words = message.split()
        if len(words) < 4:
            return message
        
        # Pick a random word to typo
        idx = random.randint(1, len(words) - 2)
        word = words[idx]
        
        if len(word) > 3:
            # Common typo patterns
            typo_patterns = [
                lambda w: w[:-1] + w[-1] * 2,  # Double last letter
                lambda w: w[0] + w[2] + w[1] + w[3:],  # Swap letters
                lambda w: w[:-1],  # Missing last letter
            ]
            
            typo_func = random.choice(typo_patterns)
            typo = typo_func(word)
            
            # Return with correction
            words[idx] = typo
            typo_message = " ".join(words)
            return f"{typo_message}\n{word}*"
        
        return message